{-# LANGUAGE OverloadedStrings #-}

import Control.Exception (evaluate)
import Data.Maybe (Maybe (Just))
import Data.Text (Text, chunksOf)
import Sol (SolType (..), encode)
import Test.Hspec
import Test.QuickCheck

splitLines :: Text -> [Text]
splitLines = chunksOf 64

main :: IO ()
main = hspec $ do
    describe "Data encoding" $ do
        it "should encode uints" $ do
            encode UInt (10 :: Int) `shouldBe` Just "000000000000000000000000000000000000000000000000000000000000000a"

-- it "should encode uint256,uint256,uint256[][4]" $ do
--     let stype = (Tuple [UInt, UInt, ArrayDyn (Array 2 UInt)])
--     let sval = (10, 10, [[3, 4], [5, 6], [7, 8], [9, 10]]) :: (Int, Int, [[Int]])
--     let expected = splitLines "000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001aa"
--     splitLines <$> encode stype sval `shouldBe` Just expected

-- describe "Prelude.head" $ do
--     it "returns the first element of a list" $ do
--         head [23 ..] `shouldBe` (23 :: Int)

--     it "returns the first element of an *arbitrary* list"
--         $ property
--         $ \x xs -> head (x : xs) == (x :: Int)

--     it "throws an exception if used with an empty list" $ do
--         evaluate (head []) `shouldThrow` anyException
